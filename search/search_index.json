{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to IT4U PowerShell Course \u00b6 Intro \u00b6 PowerShell is \"a task automation and configuration management framework from Microsoft, consisting of a command-line shell and associated scripting language\" . It is the easiest way to perform mass Windows Administrator actions, if you know where to look. The PowerShell Docs by Microsoft PowerShell 101 Book This site will be updated weekly as new course material is written / added. If you want to see the source code for this go to the Github link in the upper right hand corner.","title":"Home"},{"location":"index.html#welcome-to-it4u-powershell-course","text":"","title":"Welcome to IT4U PowerShell Course"},{"location":"index.html#intro","text":"PowerShell is \"a task automation and configuration management framework from Microsoft, consisting of a command-line shell and associated scripting language\" . It is the easiest way to perform mass Windows Administrator actions, if you know where to look. The PowerShell Docs by Microsoft PowerShell 101 Book This site will be updated weekly as new course material is written / added. If you want to see the source code for this go to the Github link in the upper right hand corner.","title":"Intro"},{"location":"intro.html","text":"Day 1 \u00b6 Environment Setup \u00b6 The first thing any good SysAdmin / Programmer does is setup their development environment. First we are going to make sure that we know how to start and run PowerShell Press the Win key, then type PowerShell , then hit Enter , this opens a new non-elevated PowerShell instance You may see there are some versions of PowerShell and PowerShell ISE ending with (x86) , these are 32-bit versions of PowerShell If you open a new PowerShell window, but this time right-click and select Run as Administrator , you will open a new PowerShell window with elevated permissions Notice the prompt ends in system32 , this is a good indicator that the current window was launched as Admin Windows comes with a simple PowerShell editor, called PowerShell ISE (Integrated Scripting Environment), open Windows PowerShell ISE ISE Goodness The ISE is a great tool to use. Shipped with every install of PowerShell, it includes syntax highlighting, intellisense, debugging, command search and so much more. A better IDE is VSCode with the PowerShell extension. Let me know if you want me to walk you through this install. Getting used to using the PowerShell CLI \u00b6 Command Aliases \u00b6 If you come from a Linux / Mac background, the PowerShell CLI will be very familiar. Many Bash commands are also aliased to their PowerShell counterpart ex. Bash 1 2 3 cd # change directory pwd # print working directory ls # list PowerShell 1 2 3 Set-Location Get-Locaton Get-ChildItem View Aliases 1 2 Get-Alias # To view all alias' Get-Alias \"command\" # To view the alias of a command, ex. Get-Alias rmdir Getting Help \u00b6 Like every other shell, PowerShell has an integrated helpfile system. Searching by Name 1 Get-Help * file * Retrieving by Name 1 Get-Help Get-FileHash With Examples 1 Get-Help Get-FileHash -Examples Navigating the File System \u00b6 The first thing you should master using any CLI is how to navigate directories. This transfers over to every other shell seamlessly. The only difference is that Windows uses \\ during navigation and Linux/Mac use / during navigation. First, navigate to your Window partition's root folder. Hint You will have to use a combination of cd / Set-Location and ls / Get-ChildItem Your prompt should now look like this: PS C:\\> Navigate back to your user folder, so that your prompt returns back to PS C:\\Users\\Username> Now navigate to your Desktop , -> PS C:\\Users\\Username\\Desktop> View the contents of your desktop using ls or Get-ChildItem Finally navigate back to your home folder using cd .. In PowerShell as well as Bash, . when utilized in a path argument refers to the current directory, and .. refers to the current parent directory. Fastest Route To accomplish the above using the least amount of typing, the commands are: 1 2 3 4 cd \\ cd $home cd .\\ Desktop cd .. The second command uses one of the preset PowerShell variables, $home which returns the home directory of the current logged in user.","title":"Week 1"},{"location":"intro.html#day-1","text":"","title":"Day 1"},{"location":"intro.html#environment-setup","text":"The first thing any good SysAdmin / Programmer does is setup their development environment. First we are going to make sure that we know how to start and run PowerShell Press the Win key, then type PowerShell , then hit Enter , this opens a new non-elevated PowerShell instance You may see there are some versions of PowerShell and PowerShell ISE ending with (x86) , these are 32-bit versions of PowerShell If you open a new PowerShell window, but this time right-click and select Run as Administrator , you will open a new PowerShell window with elevated permissions Notice the prompt ends in system32 , this is a good indicator that the current window was launched as Admin Windows comes with a simple PowerShell editor, called PowerShell ISE (Integrated Scripting Environment), open Windows PowerShell ISE ISE Goodness The ISE is a great tool to use. Shipped with every install of PowerShell, it includes syntax highlighting, intellisense, debugging, command search and so much more. A better IDE is VSCode with the PowerShell extension. Let me know if you want me to walk you through this install.","title":"Environment Setup"},{"location":"intro.html#getting-used-to-using-the-powershell-cli","text":"","title":"Getting used to using the PowerShell CLI"},{"location":"intro.html#command-aliases","text":"If you come from a Linux / Mac background, the PowerShell CLI will be very familiar. Many Bash commands are also aliased to their PowerShell counterpart ex. Bash 1 2 3 cd # change directory pwd # print working directory ls # list PowerShell 1 2 3 Set-Location Get-Locaton Get-ChildItem View Aliases 1 2 Get-Alias # To view all alias' Get-Alias \"command\" # To view the alias of a command, ex. Get-Alias rmdir","title":"Command Aliases"},{"location":"intro.html#getting-help","text":"Like every other shell, PowerShell has an integrated helpfile system. Searching by Name 1 Get-Help * file * Retrieving by Name 1 Get-Help Get-FileHash With Examples 1 Get-Help Get-FileHash -Examples","title":"Getting Help"},{"location":"intro.html#navigating-the-file-system","text":"The first thing you should master using any CLI is how to navigate directories. This transfers over to every other shell seamlessly. The only difference is that Windows uses \\ during navigation and Linux/Mac use / during navigation. First, navigate to your Window partition's root folder. Hint You will have to use a combination of cd / Set-Location and ls / Get-ChildItem Your prompt should now look like this: PS C:\\> Navigate back to your user folder, so that your prompt returns back to PS C:\\Users\\Username> Now navigate to your Desktop , -> PS C:\\Users\\Username\\Desktop> View the contents of your desktop using ls or Get-ChildItem Finally navigate back to your home folder using cd .. In PowerShell as well as Bash, . when utilized in a path argument refers to the current directory, and .. refers to the current parent directory. Fastest Route To accomplish the above using the least amount of typing, the commands are: 1 2 3 4 cd \\ cd $home cd .\\ Desktop cd .. The second command uses one of the preset PowerShell variables, $home which returns the home directory of the current logged in user.","title":"Navigating the File System"},{"location":"week2.html","text":"Variables, Numbers and Strings \u00b6 The PowerShell language is a weak typed, interpreted language. Insert lengthy explanation here \u2192 Variables \u00b6 Variables are denoted by a dollar sign preceeding a name, ex. 1 2 3 4 $hello = \"Hello\" $world = \" World!\" $hello + $world # Hello World! Having good descriptive varible names is crucial to writing good scripts, and is a practice that carries over to every programming language. When writing a script, try to follow a common naming case scheme like snake_case or camelCase Link to Aricle From about_Variables : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <# A variable is a unit of memory in which values are stored. In PowerShell, variables are represented by text strings that begin with a dollar sign ($), such as $a, $process, or $my_var. Variable names aren't case-sensitive, and can include spaces and special characters. PowerShell variables are loosely typed, which means that they aren't limited to a particular type of object. A single variable can even contain a collection, or array, of different types of objects at the same time. #> ex : $a = 12 # System.Int32 $a = \"Word\" # System.String $a = 12 , \"Word\" # array of System.Int32, System.String $a = Get-ChildItem C : \\ Windows # FileInfo and DirectoryInfo types Numbers \u00b6 Numbers in PowerShell can either be used implicitly, or type cast into a more specific number type. 1 2 3 4 5 6 # Single line comments are denoted by a # at the start of the line # Anything written in a comment is ignored 5 + 5 # Returns 10 [int] \"5\" + 5 # Also returns 10, because the string 5 is type cast to become an integer PowerShell will attempt to type cast all data following a data type to be the same, ex: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 function add5 ( [int] $number ) { return $number + 5 ; } add5 ( 10 ) # Returns 15 add5 ( \"hello\" ) <# Returns: add5 : Cannot process argument transformation on parameter 'number'. Cannot convert value \"hello\" to type \"System.Int32\". Error: \"Input string was not in a correct format.\" At line:5 char:5 + add5(\"hello\") + ~~~~~~~~~ + CategoryInfo : InvalidData: (:) [add5], ParameterBindingArgumentTransformationException + FullyQualifiedErrorId : ParameterArgumentTransformationError,add5 #> function addString5 ( [string] $number ) { return $number + 5 ; } addString5 ( 10 ) # Returns 105, because 10 is type cast to be a string, and 5 is type cast to be a string # If the following data is unable to be cast to the first data type, PowerShell will throw an error Strings \u00b6 Strings are sequences of characters, usually arranged in words. In PowerShell you can usually tell something is a string if it is encased in double quotes, \"\", single quotes '', or backticks ``. This article - Variable Substitution has great examples on variable substituion within strings in PowerShell This article from the MS Docs explains all special_Characters Booleans \u00b6 A boolean is either true or false . To a computer this is represented by a single bit. If true, the bit is 1 . If false the bit is 0 . In PowerShell a boolean is represented by $true or $false , null is represented by $null . All about Null This picture is in relation to JavaScript, but the main idea still transfers","title":"Week 2"},{"location":"week2.html#variables-numbers-and-strings","text":"The PowerShell language is a weak typed, interpreted language. Insert lengthy explanation here \u2192","title":"Variables, Numbers and Strings"},{"location":"week2.html#variables","text":"Variables are denoted by a dollar sign preceeding a name, ex. 1 2 3 4 $hello = \"Hello\" $world = \" World!\" $hello + $world # Hello World! Having good descriptive varible names is crucial to writing good scripts, and is a practice that carries over to every programming language. When writing a script, try to follow a common naming case scheme like snake_case or camelCase Link to Aricle From about_Variables : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <# A variable is a unit of memory in which values are stored. In PowerShell, variables are represented by text strings that begin with a dollar sign ($), such as $a, $process, or $my_var. Variable names aren't case-sensitive, and can include spaces and special characters. PowerShell variables are loosely typed, which means that they aren't limited to a particular type of object. A single variable can even contain a collection, or array, of different types of objects at the same time. #> ex : $a = 12 # System.Int32 $a = \"Word\" # System.String $a = 12 , \"Word\" # array of System.Int32, System.String $a = Get-ChildItem C : \\ Windows # FileInfo and DirectoryInfo types","title":"Variables"},{"location":"week2.html#numbers","text":"Numbers in PowerShell can either be used implicitly, or type cast into a more specific number type. 1 2 3 4 5 6 # Single line comments are denoted by a # at the start of the line # Anything written in a comment is ignored 5 + 5 # Returns 10 [int] \"5\" + 5 # Also returns 10, because the string 5 is type cast to become an integer PowerShell will attempt to type cast all data following a data type to be the same, ex: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 function add5 ( [int] $number ) { return $number + 5 ; } add5 ( 10 ) # Returns 15 add5 ( \"hello\" ) <# Returns: add5 : Cannot process argument transformation on parameter 'number'. Cannot convert value \"hello\" to type \"System.Int32\". Error: \"Input string was not in a correct format.\" At line:5 char:5 + add5(\"hello\") + ~~~~~~~~~ + CategoryInfo : InvalidData: (:) [add5], ParameterBindingArgumentTransformationException + FullyQualifiedErrorId : ParameterArgumentTransformationError,add5 #> function addString5 ( [string] $number ) { return $number + 5 ; } addString5 ( 10 ) # Returns 105, because 10 is type cast to be a string, and 5 is type cast to be a string # If the following data is unable to be cast to the first data type, PowerShell will throw an error","title":"Numbers"},{"location":"week2.html#strings","text":"Strings are sequences of characters, usually arranged in words. In PowerShell you can usually tell something is a string if it is encased in double quotes, \"\", single quotes '', or backticks ``. This article - Variable Substitution has great examples on variable substituion within strings in PowerShell This article from the MS Docs explains all special_Characters","title":"Strings"},{"location":"week2.html#booleans","text":"A boolean is either true or false . To a computer this is represented by a single bit. If true, the bit is 1 . If false the bit is 0 . In PowerShell a boolean is represented by $true or $false , null is represented by $null . All about Null This picture is in relation to JavaScript, but the main idea still transfers","title":"Booleans"},{"location":"week3.html","text":"Logical Operators and RegEx \u00b6 PREVIEW","title":"Week3"},{"location":"week3.html#logical-operators-and-regex","text":"PREVIEW","title":"Logical Operators and RegEx"}]}